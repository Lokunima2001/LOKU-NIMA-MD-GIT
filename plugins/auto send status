const { cmd } = require('../command');
const fs = require('fs');

// Path to save the status message
const statusFilePath = './savedStatus.json';

// Load saved status if it exists
let savedStatus = {};

if (fs.existsSync(statusFilePath)) {
    savedStatus = JSON.parse(fs.readFileSync(statusFilePath));
}

// Store interval IDs for multiple auto-send jobs
let sendInterval;

cmd({
    pattern: "save",
    react: "💾",
    desc: "Save the current status message.",
    category: "utility",
    use: '.save',
    filename: __filename
}, async (conn, mek, m, { from, reply, isGroup, quoted }) => {
    // Ensure the user replies to a message to save it
    if (!quoted) return reply("❌ Please reply to a message to save as status.");

    // Save the status message
    const statusMessage = quoted.body;
    
    // Save to file
    savedStatus = { message: statusMessage };
    fs.writeFileSync(statusFilePath, JSON.stringify(savedStatus, null, 2));

    // Send confirmation
    reply(`✅ Status message saved: "${statusMessage}"`);
});

cmd({
    pattern: "autosendstatus",
    react: "⏰",
    desc: "Auto-send saved status at regular intervals.",
    category: "utility",
    use: '.autosendstatus <interval in minutes>',
    filename: __filename
}, async (conn, mek, m, { from, args, isMe, reply }) => {
    // Ensure only the bot owner can use this command
    if (!isMe) return reply("❌ You don't have permission to use this command.");

    const intervalMinutes = parseInt(args[0]); // Interval in minutes

    if (!intervalMinutes) return reply("❌ Please specify an interval in minutes.");

    if (!savedStatus.message) return reply("❌ No status message saved yet. Please save a status first.");

    // Clear any previous intervals
    if (sendInterval) clearInterval(sendInterval);

    // Set up the new auto-send interval
    sendInterval = setInterval(async () => {
        try {
            await conn.sendMessage(from, { text: savedStatus.message });
            console.log(`Auto-sent status: "${savedStatus.message}" to ${from}`);
        } catch (e) {
            console.error('Failed to send auto message:', e);
        }
    }, intervalMinutes * 60 * 1000); // Convert minutes to milliseconds

    reply(`✅ Auto-send set! I will send the saved status every ${intervalMinutes} minute(s).`);
});

// Command to stop the auto-send status
cmd({
    pattern: "stopautosendstatus",
    react: "🛑",
    desc: "Stop auto-sending the saved status.",
    category: "utility",
    use: '.stopautosendstatus',
    filename: __filename
}, async (conn, mek, m, { from, isMe, reply }) => {
    if (!isMe) return reply("❌ You don't have permission to use this command.");

    // Clear the interval to stop auto-sending
    if (sendInterval) {
        clearInterval(sendInterval);
        sendInterval = null;
        reply("✅ Auto-send stopped.");
    } else {
        reply("❌ No auto-send is currently active.");
    }
});
